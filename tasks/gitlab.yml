---

- name: GitLab CE - Replace external url
  become: true
  ansible.builtin.replace:
    path: "{{ gitlab_conf }}"
    regexp: external_url 'http://gitlab.example.com'
    replace: external_url 'https://{{ gitlab_domain_name }}'
  tags: gitlab

- name: GitLab CE - Update GitLab Config
  become: yes
  ansible.builtin.lineinfile:
    dest: "{{ gitlab_conf }}"
    line: "{{ item }}"
  with_items:
    - gitlab_rails['initial_root_password'] = "{{ gitlab_root_password }}"
    - gitlab_rails['initial_shared_runners_registration_token'] = "{{ gitlab_registration_token }}"
    - nginx['listen_port'] = 80
    - nginx['listen_https'] = false
  tags: gitlab

- name: GitLab CE - Reconfigure
  become: true
  command: 'gitlab-ctl reconfigure'
  notify:
    - Restart gitlab
  tags: gitlab

- name: Flush handlers
  meta: flush_handlers

- name: GitLab CE - Install gitlab module
  become: true
  ansible.builtin.pip:
    name:
      - python-gitlab
    executable: pip3
  tags: gitlab

- name: GitLab CE - Check if root script exist
  become: true
  ansible.builtin.stat:
    path: "{{ tmp_path }}/script_root.sh"
  register: script
  tags: gitlab

- name: GitLab CE - Copy shell-script for root
  become: true
  ansible.builtin.template:
    src: script_root.sh.j2
    dest: "{{ tmp_path }}/script_root.sh"
    mode: '755'
  when: not script.stat.exists
  tags: gitlab

- name: GitLab CE - Create API token for root
  become: true
  command: "{{ tmp_path }}/script_root.sh"
  register: token
  when: not script.stat.exists
  tags: gitlab

- name: GitLab CE - Add user
  community.general.gitlab_user:
    api_url: "{{ gitlab_api_url }}"
    api_token: "{{ gitlab_api_token_root }}"
    name: "{{ gitlab_name }}"
    username: "{{ gitlab_username }}"
    password: "{{ gitlab_password }}"
    email: "{{ gitlab_email }}"
    confirm: "{{ gitlab_confirm }}"
    sshkey_name: "{{ gitlab_sshkey_name }}"
    sshkey_file: "{{ gitlab_sshkey_file }}"
    state: present
    access_level: "{{ gitlab_access_level }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3.6
  tags: gitlab

- name: GitLab CE - Check if netology script exist
  become: true
  ansible.builtin.stat:
    path: "{{ tmp_path }}/script_netology.sh"
  register: script
  tags: gitlab

- name: Secure Install - Copy shell-script for netology
  become: true
  ansible.builtin.template:
    src: script_netology.sh.j2
    dest: "{{ tmp_path }}/script_netology.sh"
    mode: '755'
  when: not script.stat.exists
  tags: gitlab

- name: Pipeline - Create API token for netology
  become: true
  command: "{{ tmp_path }}/script_netology.sh"
  register: token
  when: not script.stat.exists
  tags: gitlab

- name: Pipeline - Create Group
  community.general.gitlab_group:
    api_url: "{{ gitlab_api_url }}"
    api_token: "{{ gitlab_api_token_user }}"
    name: "{{ gitlab_group_name }}"
    path: "{{ gitlab_group_path }}"
    state: present
  vars:
    ansible_python_interpreter: /usr/bin/python3.6
  tags: gitlab

- name: Pipeline - Create GitLab Project Wordpress
  community.general.gitlab_project:
    api_url: "{{ gitlab_api_url }}"
    api_token: "{{ gitlab_api_token_user }}"
    name: "{{ gitlab_project_name }}"
    group: "{{ gitlab_group_name }}"
  vars:
    ansible_python_interpreter: /usr/bin/python3.6
  tags: gitlab
